import logging
import re
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import CallbackContext, CommandHandler, MessageHandler, filters, ConversationHandler
from api_clients import register_user
from handlers.search_file import start_search_from_file
from handlers.search_service import start_search

logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

PHONE_NUMBER = 1
OFFER_SEARCH = 2


async def start(update: Update, context: CallbackContext):
    """–°—Ç–∞—Ä—Ç–æ–≤–∞ —Ç–æ—á–∫–∞: –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É."""
    logger.info("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á %s —Ä–æ–∑–ø–æ—á–∞–≤ —Ä–æ–∑–º–æ–≤—É.", update.effective_user.id)

    keyboard = [[KeyboardButton("üîë –ê–≤—Ç–æ—Ä–∏–∑—É–≤–∞—Ç–∏—Å—è", request_contact=True)]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)

    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤—ñ—Ç! –î–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –Ω–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É 'üîë –ê–≤—Ç–æ—Ä–∏–∑—É–≤–∞—Ç–∏—Å—è'.",
        reply_markup=reply_markup,
    )
    return PHONE_NUMBER


def normalize_phone_number(phone_number: str) -> str:
    """–ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É."""
    phone_number = re.sub(r"[^\d+]", "", phone_number)
    if phone_number.startswith("+"):
        phone_number = phone_number[1:]
    if phone_number.startswith("8"):
        phone_number = "380" + phone_number[1:]
    if phone_number.startswith("380") and len(phone_number) == 12:
        return phone_number
    return None


async def register(update: Update, context: CallbackContext):
    """–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É."""
    try:
        if update.message.contact:
            phone_number = update.message.contact.phone_number
        else:
            await update.message.reply_text("‚ùå –ù–µ–º–æ–∂–ª–∏–≤–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
            return PHONE_NUMBER

        normalized_phone_number = normalize_phone_number(phone_number)
        if not normalized_phone_number:
            await update.message.reply_text("‚ö†Ô∏è –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –º–∞—î –±—É—Ç–∏ —É —Ñ–æ—Ä–º–∞—Ç—ñ +380XXXXXXXXX. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
            return PHONE_NUMBER

        logger.info("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á %s —Ä–µ—î—Å—Ç—Ä—É—î –Ω–æ–º–µ—Ä: %s", update.effective_user.id, normalized_phone_number)

        try:
            response = await register_user(normalized_phone_number)
            context.user_data["api_key"] = response.get("api_key")
            await update.message.reply_text("‚úÖ –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ.")
            await offer_search(update)
            return ConversationHandler.END

        except ValueError as ve:
            if "already exists" in str(ve):
                await update.message.reply_text("‚ö†Ô∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π.")
                await offer_search(update)
                return ConversationHandler.END
            else:
                await update.message.reply_text(f"‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: {ve}")
        except Exception as e:
            await update.message.reply_text("‚ùó –ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
            logger.exception("–ü–æ–º–∏–ª–∫–∞ API: %s", e)

    except Exception as e:
        await update.message.reply_text("‚ùó –°—Ç–∞–ª–∞—Å—è –Ω–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        logger.exception("–ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó: %s", e)

    return PHONE_NUMBER


async def offer_search(update: Update):
    """–ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—è –≤–∏–±–æ—Ä—É –ø–æ—à—É–∫—É."""
    keyboard = [
        [KeyboardButton("üåü –ü–æ—á–∞—Ç–∏ –ø–æ—à—É–∫")],
        [KeyboardButton("üìÅ –®—É–∫–∞—Ç–∏ –∑ —Ñ–∞–π–ª—É")],
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)
    await update.message.reply_text(
        "üîé –û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –ø–æ—à—É–∫—É, –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—É –∫–Ω–æ–ø–∫—É:",
        reply_markup=reply_markup,
    )
    return OFFER_SEARCH


conversation_handler = ConversationHandler(
    entry_points=[CommandHandler("start", start)],
    states={
        PHONE_NUMBER: [MessageHandler(filters.CONTACT, register)],
        OFFER_SEARCH: [
            MessageHandler(filters.Regex("^üåü –ü–æ—á–∞—Ç–∏ –ø–æ—à—É–∫$"), start_search),
            MessageHandler(filters.Regex("^üìÅ –®—É–∫–∞—Ç–∏ –∑ —Ñ–∞–π–ª—É$"), start_search_from_file),
        ],
    },
    fallbacks=[],
)
