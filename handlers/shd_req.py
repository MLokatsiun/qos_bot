import logging
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import CallbackContext, MessageHandler, filters, ConversationHandler, CommandHandler
from api_clients import send_request_to_api_shd

logger = logging.getLogger(__name__)

ENTERING_SEARCH_TYPE_SH, ENTERING_SEARCH_DATA_SH = range(2)

async def start_search_sh(update: Update, context: CallbackContext):
    """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—É –ø–æ—à—É–∫—É."""
    await update.message.reply_text("üöÄ –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ—á–Ω—ñ—Ç—å –ø–æ—à—É–∫.", reply_markup=ReplyKeyboardRemove())
    tg_id = str(update.message.from_user.id)
    context.user_data["tg_id"] = tg_id
    api_key = context.user_data.get("api_key")

    if not api_key:
        keyboard = [[KeyboardButton("üîë –ê–≤—Ç–æ—Ä–∏–∑—É–≤–∞—Ç–∏—Å—è")]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
        await update.message.reply_text(
            "‚ùó –í–∏ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ –∞–±–æ –Ω–µ –º–∞—î—Ç–µ API –∫–ª—é—á–∞. –©–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó.",
            reply_markup=reply_markup)
        return ConversationHandler.END

    keyboard = [
        [KeyboardButton("üîç –®—É–∫–∞—Ç–∏ –∑–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏"),
         KeyboardButton("üì± –®—É–∫–∞—Ç–∏ –ø–æ IP")],
        [KeyboardButton("üîô –ù–∞–∑–∞–¥"), KeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    await update.message.reply_text("–í–∏–±–µ—Ä—ñ—Ç—å, —è–∫ —à—É–∫–∞—Ç–∏:", reply_markup=reply_markup)
    return ENTERING_SEARCH_TYPE_SH

async def osint_shodan_menu(update: Update, context: CallbackContext):
    """–ú–µ–Ω—é –∑ –∫–Ω–æ–ø–∫–∞–º–∏ OSINT —Ç–∞ Shodan."""
    keyboard = [
        [KeyboardButton("üïµÔ∏è‚Äç‚ôÇÔ∏è OSINT")],
        [KeyboardButton("üåê Shodan")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    await update.message.reply_text("üîç –û–±–µ—Ä—ñ—Ç—å —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç:", reply_markup=reply_markup)
    return ConversationHandler.END

async def handle_search_type_sh(update: Update, context: CallbackContext):
    """–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É —Ç–∏–ø—É –ø–æ—à—É–∫—É."""
    search_type = update.message.text.strip()
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –æ–±—Ä–∞–≤ —Ç–∏–ø –ø–æ—à—É–∫—É: {search_type}")

    if search_type == 'üîç –®—É–∫–∞—Ç–∏ –∑–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏':
        await update.message.reply_text("üîç –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –¥–ª—è –ø–æ—à—É–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç—ñ '51.55740, 29.88185'.")
        context.user_data["search_type"] = "GEO"
    elif search_type == 'üì± –®—É–∫–∞—Ç–∏ –ø–æ IP':
        await update.message.reply_text("üì± –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å IP –¥–ª—è –ø–æ—à—É–∫—É.")
        context.user_data["search_type"] = "PHONE"
    elif search_type == 'üîô –ù–∞–∑–∞–¥':
        return await main_menu_T(update, context)
    elif search_type == "üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é":
        await osint_shodan_menu(update, context)
        return ConversationHandler.END
    else:
        await update.message.reply_text("‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –æ–¥–∏–Ω –∑ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤.")
        return ENTERING_SEARCH_TYPE_SH

    keyboard = [[KeyboardButton("üîô –ù–∞–∑–∞–¥"), KeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    await update.message.reply_text("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é' –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É.", reply_markup=reply_markup)

    logger.info("–ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ —Å—Ç–∞–Ω—É ENTERING_SEARCH_DATA_SHD")
    return ENTERING_SEARCH_DATA_SH


async def handle_request_data_sh(update: Update, context: CallbackContext):
    """–û–±—Ä–æ–±–∫–∞ –∑–∞–ø–∏—Ç—É –∑–∞ –≤–≤–µ–¥–µ–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏."""
    logger.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ –¥–∞–Ω—ñ –¥–ª—è –ø–æ—à—É–∫—É: {update.message.text}")

    search_data = update.message.text.strip()
    search_type = context.user_data.get("search_type")
    tg_id = context.user_data.get("tg_id")
    api_key = context.user_data.get("api_key")

    if update.message.text == "üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é":
        await osint_shodan_menu(update, context)
        return ConversationHandler.END

    if not tg_id or not api_key:
        keyboard = [[KeyboardButton("üîë –ê–≤—Ç–æ—Ä–∏–∑—É–≤–∞—Ç–∏—Å—è")]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
        await update.message.reply_text(
            "‚ùó –í–∏ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ –∞–±–æ –Ω–µ –º–∞—î—Ç–µ API –∫–ª—é—á–∞. –©–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó.",
            reply_markup=reply_markup)
        return ConversationHandler.END

    logger.info(f"–í—ñ–¥–ø—Ä–∞–≤–∫–∞ –∑–∞–ø–∏—Ç—É –¥–æ API: tg_id={tg_id}, search_data={search_data}, search_type={search_type}")

    response = await send_request_to_api_shd(tg_id, search_data, search_type, api_key)

    if response.get("error"):
        await update.message.reply_text(f"‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—à—É–∫—É: {response['error']}")
    else:
        request_ids = ", ".join(response.get("request_ids", []))
        await update.message.reply_text(f"‚úÖ –ó–∞–ø–∏—Ç —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ.\n\nRequest IDs: {request_ids}")

    keyboard = [
        [KeyboardButton("üîç –®—É–∫–∞—Ç–∏ –∑–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏"),
         KeyboardButton("üì± –®—É–∫–∞—Ç–∏ –ø–æ IP")],
        [KeyboardButton("üîô –ù–∞–∑–∞–¥"), KeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)

    await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å, —â–æ —Ä–æ–±–∏—Ç–∏ –¥–∞–ª—ñ:", reply_markup=reply_markup)

    return ENTERING_SEARCH_TYPE_SH


async def main_menu_T(update: Update, context: CallbackContext):
    """–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é."""
    keyboard = [
        [KeyboardButton("üåê –ü–æ—à—É–∫ –≤ –º–µ—Ä–µ–∂—ñ")],
        [KeyboardButton("üìÅ –®—É–∫–∞—Ç–∏ –∑ —Ñ–∞–π–ª—É Shodan")],
        [KeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")],
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    await update.message.reply_text("üëã –ü—Ä–∏–≤—ñ—Ç! –û—Å—å —â–æ —Ç–∏ –º–æ–∂–µ—à –∑—Ä–æ–±–∏—Ç–∏:", reply_markup=reply_markup)
    return ConversationHandler.END


conversation_handler = ConversationHandler(
    entry_points=[MessageHandler(filters.TEXT & filters.Regex("üåê –ü–æ—à—É–∫ –≤ –º–µ—Ä–µ–∂—ñ"), start_search_sh)],
    states={
        ENTERING_SEARCH_TYPE_SH: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, handle_search_type_sh)
        ],
        ENTERING_SEARCH_DATA_SH: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, handle_request_data_sh)
        ],
    },
    fallbacks=[MessageHandler(filters.TEXT & filters.Regex("üîô –ù–∞–∑–∞–¥"), main_menu_T),
               MessageHandler(filters.TEXT & filters.Regex("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"), osint_shodan_menu)],
)

