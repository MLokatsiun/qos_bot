import logging
import os
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, KeyboardButton
from telegram.ext import CallbackContext, MessageHandler, filters, ConversationHandler
from api_clients import send_file_to_api, API_URL

logger = logging.getLogger(__name__)

SELECT_COUNTRY, WAITING_FOR_FILE = range(2)

async def main_menu(update: Update, context: CallbackContext):
    """–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –∑ –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤–∏–±–æ—Ä—É."""
    keyboard = [
        [KeyboardButton("üåü –ü–æ—á–∞—Ç–∏ –ø–æ—à—É–∫")],
        [KeyboardButton("üìÅ –®—É–∫–∞—Ç–∏ –∑ —Ñ–∞–π–ª—É")],
        [KeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")],
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=reply_markup)


async def main_menu_N(update: Update, context: CallbackContext):
    """–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –∑ –∫–Ω–æ–ø–∫–∞–º–∏ OSINT —Ç–∞ Shodan."""
    keyboard = [
        [KeyboardButton("üïµÔ∏è‚Äç‚ôÇÔ∏è OSINT")],
        [KeyboardButton("üåê Shodan")],
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=reply_markup)


async def return_to_main_menu(update: Update, context: CallbackContext):
    """–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é –ø—ñ—Å–ª—è –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ '‚óÄÔ∏è –ù–∞–∑–∞–¥'."""
    await main_menu(update, context)
    return ConversationHandler.END


async def handle_file(update: Update, context: CallbackContext):
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ñ–∞–π–ª—É —Ç–∞ –π–æ–≥–æ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –≤ API."""
    tg_id = context.user_data.get("tg_id")
    api_key = context.user_data.get("api_key")
    country_code = context.user_data.get("country_code")

    if update.message.text == "üîô –ù–∞–∑–∞–¥":
        await main_menu(update, context)
        return ConversationHandler.END

    if update.message.text == "üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é":
        await main_menu_N(update, context)
        return ConversationHandler.END

    if not tg_id or not api_key or not country_code:
        await update.message.reply_text("‚ùó –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø–æ—á–∞—Ç–∏ –ø–æ—à—É–∫ –∑–Ω–æ–≤—É.")
        return ConversationHandler.END

    document = update.message.document
    if not document:
        await update.message.reply_text("üìÅ –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å Excel —Ñ–∞–π–ª.")
        return WAITING_FOR_FILE

    if not document.file_name.endswith((".xlsx", ".xls")):
        await update.message.reply_text("‚ùå –§–∞–π–ª –º–∞—î –±—É—Ç–∏ —É —Ñ–æ—Ä–º–∞—Ç—ñ Excel (.xlsx –∞–±–æ .xls).")
        return WAITING_FOR_FILE

    try:
        file = await document.get_file()
        local_path = f"./{document.file_name}"
        await file.download_to_drive(local_path)
    except Exception as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–∞–π–ª: {e}")
        await update.message.reply_text("‚ö†Ô∏è –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Ñ–∞–π–ª—É. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.")
        return WAITING_FOR_FILE

    try:
        api_url = f"{API_URL}tg_request/generate_pdf/?tg_id={tg_id}&search_country={country_code}"
        response = await send_file_to_api(api_url, local_path, api_key)
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–∫–ª–∏–∫—É API: {e}")
        await update.message.reply_text("‚ö†Ô∏è –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —Ñ–∞–π–ª—É.")
    finally:
        if os.path.exists(local_path):
            os.remove(local_path)

    if response.get("error"):
        await update.message.reply_text(f"‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —Ñ–∞–π–ª—É: {response['error']}")
    else:
        await update.message.reply_text("‚úÖ –§–∞–π–ª —É—Å–ø—ñ—à–Ω–æ –æ–±—Ä–æ–±–ª–µ–Ω–æ.")

    keyboard = [
        [KeyboardButton("üá∫üá¶ –£–∫—Ä–∞—ó–Ω–∞"), KeyboardButton("üá∑üá∫ –†–æ—Å—ñ—è")],
        [KeyboardButton("üîô –ù–∞–∑–∞–¥"), KeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)

    await update.message.reply_text("üåç –û–±–µ—Ä—ñ—Ç—å –∫—Ä–∞—ó–Ω—É –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ—à—É–∫—É –∞–±–æ –ø–æ–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –º–µ–Ω—é:",
                                   reply_markup=reply_markup)

    return SELECT_COUNTRY


async def select_country(update: Update, context: CallbackContext):
    country = update.message.text.strip().lower()

    if country == "üîô –ù–∞–∑–∞–¥":
        await main_menu(update, context)
        return ConversationHandler.END

    if country == "üè† –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é":
        await main_menu_N(update, context)
        return ConversationHandler.END

    country_mapping = {
        "üá∫üá¶ —É–∫—Ä–∞—ó–Ω–∞": "UA",
        "üá∑üá∫ —Ä–æ—Å—ñ—è": "RU"
    }

    if country in country_mapping:
        context.user_data["country_code"] = country_mapping[country]
        await update.message.reply_text(
            f"‚úÖ –í–∏ –æ–±—Ä–∞–ª–∏ –ø–æ—à—É–∫ —É –∫—Ä–∞—ó–Ω—ñ '{country}'. –¢–µ–ø–µ—Ä –Ω–∞–¥—ñ—à–ª—ñ—Ç—å Excel —Ñ–∞–π–ª —É —Ñ–æ—Ä–º–∞—Ç—ñ: \n"
            "id | –§–ò–û | –ò–ù–ù | –ù–û–ú–ï–† –¢–ï–õ–ï–§–û–ù–ê | TG_ID | FACEBOOK_ID | VK_ID",
            reply_markup=ReplyKeyboardRemove(),
        )

        keyboard = [
            [KeyboardButton("üîô –ù–∞–∑–∞–¥"), KeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)
        await update.message.reply_text(
            "üîç –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–∞–π–ª –∞–±–æ –ø–æ–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é:",
            reply_markup=reply_markup
        )
        return WAITING_FOR_FILE
    else:
        await update.message.reply_text("‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É –∫—Ä–∞—ó–Ω—É –¥–ª—è –ø–æ—à—É–∫—É.")
        return SELECT_COUNTRY


async def start_search_from_file(update: Update, context: CallbackContext):
    """–ü–æ—á–∞—Ç–æ–∫ –ø–æ—à—É–∫—É: –≤–∏–±—ñ—Ä –∫—Ä–∞—ó–Ω–∏ –¥–ª—è –ø–æ—à—É–∫—É."""
    tg_id = str(update.message.from_user.id)
    context.user_data["tg_id"] = tg_id

    api_key = context.user_data.get("api_key")
    if not api_key:
        keyboard = [
            [KeyboardButton("üîë –ê–≤—Ç–æ—Ä–∏–∑—É–≤–∞—Ç–∏—Å—è")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
        await update.message.reply_text("‚ùó –í–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ. –©–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó.",
                                        reply_markup=reply_markup)
        return ConversationHandler.END

    await update.message.reply_text(
        "üåç –í–∏–±–µ—Ä—ñ—Ç—å –∫—Ä–∞—ó–Ω—É –¥–ª—è –ø–æ—à—É–∫—É:",
        reply_markup=ReplyKeyboardMarkup(
            [[KeyboardButton("üá∫üá¶ –£–∫—Ä–∞—ó–Ω–∞"), KeyboardButton("üá∑üá∫ –†–æ—Å—ñ—è")], ["üîô –ù–∞–∑–∞–¥", "üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"]],
            resize_keyboard=True,
            one_time_keyboard=True,
        ),
    )
    return SELECT_COUNTRY

conversation_handler = ConversationHandler(
    entry_points=[MessageHandler(filters.TEXT & filters.Regex("^üìÅ –®—É–∫–∞—Ç–∏ –∑ —Ñ–∞–π–ª—É$"), start_search_from_file)],
    states={
        SELECT_COUNTRY: [
            MessageHandler(filters.TEXT & filters.Regex("^üîô –ù–∞–∑–∞–¥$"), return_to_main_menu),
            MessageHandler(filters.TEXT & ~filters.COMMAND, select_country),
        ],
        WAITING_FOR_FILE: [MessageHandler(filters.Document.ALL, handle_file)],
    },
    fallbacks=[MessageHandler(filters.TEXT & filters.Regex("^üîô –ù–∞–∑–∞–¥$"), return_to_main_menu)]
)
